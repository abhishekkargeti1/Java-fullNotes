                                           OOPS (Object Oriented Programming System)
                                                 Features with its Defination
                
                
                 1. Inheritance (Reuseablity).
                
                
                 2. Polymorphism (One name many forms).
                
                
                 3. Encaptulation (Blinding data member and member function in single unit)||(Data hiding).
                
                
                 4. Abstraction (Show functionality only hide complexity).
                
                
                 5. Object (Anything in this real world is know as an Object)&&(Any thing in this Real world is known as Object ),(Physically Exist).
                Ex Pen,Makers ,Laptop etc.
                Object(Real World)                                  Object(Computer)
                 -> Properties(State)                               Data member(Instance Variable)

                 ->Behaviour                                        Member function(Method)
                
                 Data Member                                            Member Function
                 1. Non static                                          Non static                 
                 2. Static                                              Static

                 Rule  :-   non static things is always belongs to Object .
                 Rule  :-   Static thing always belongs to class.
                
                 6. Class (Defination of the object is class).    
                    Defination of class :-  class is a collection of similar type of objects .(logical Entity).
                    class is Template or blueprint of Objects.

                    Ex :- class<class Name>
                    {
                        Field 
                        Method
                        constructor
                        block
                        nested class
                    }
        In java there are 4 ways to initialize Instance Variable
        -> By Reference
        -> By Method
        -> By constructor
        -> By Init Block (Instance initialize Block).

        5 many ways to create object in java 
        -> By new Keyword 
        -> By Factory Method
        -> By newInstance() Method
        ->By clone () method
        -> By Deserialization 

Anonymous object :-
            It means nameless .. An object which has no Reference is know asan Anonymous object . It can be used at the run time of object creation only.

            syntax :-
             new temp(); Anonymous object
            calling method through Anonymous object
            new temp().setData();


    Example :-

    class anonymousObject {
    String penBrand;
    String penColor;
    String penInkcolor;
    double penPrice;
    void setData(String brand ,String color,String inkColor , double price){
        penBrand = brand;
        penColor = color;
        penInkcolor = inkColor;
        penPrice = price;
        displayData();
    }
    void displayData(){
        System.out.println("Brand "+ penBrand);
        System.out.println("Color "+ penColor);
        System.out.println("Ink Color "+ penInkcolor);
        System.out.println("Price "+ penPrice);
    }
    public static void main(String[] args) { 
        new anonymousObject().setData("uni-ball","Red","Black",2000.00);
    }    
}

Creation of object of one type only in single line 

    class test {
        String micName;
        int price;
        void setData(String name,int micPrice){
            micName = name;
            price = micPrice;
        }
        void displayData(){
            System.out.println("Mic name is "+ micName); 
            System.out.println("Mic price is "+ price); 
        }
        public static void main(String []args){
            test t1 = new test(),t2= new test(),t3 = new test();  // Creation of object of one type only in single line 
        }
    }

    this Keyword in java :-

    In Java this is a Reference Variable that holds Reference id of current object Reference id .(Object)

    class pratice {
    int id ;
    String Name ;
    String Profile;
    void setData(int id, String Name,String Profile){
        this.id = id;
        this.Name = Name;
        this.Profile = Profile;

    }
    void displayData(){
        System.out.println("Id "+id);
        System.out.println("Name "+Name);
        System.out.println("Profile "+Profile);
    }
    public static void main(String []args){
        pratice p1 = new pratice();
        p1.setData(1001,"Abhi","Java Dev");
        p1.displayData();
    }
}

    this to invoke current class method (Non - Static). 
    this () to invoke current class constructor (constructor chaining). It is used to reuse the constructor . this must be the first statement in constructor.

    this : - to pass as argument in the constructor call.

    this Keyword can be use to return current class Instance.

   class test{
    test fun1(){
        System.out.println("I am fun1");
        return this;
    }
    test fun2(){
        System.out.println("I am fun2");
        return this;
    }
    test fun3(){
        System.out.println("I am fun3");
        return this;
    }
    test fun4(){
        System.out.println("I am fun4");
        return this;
    }
    void fun5(){
        System.out.println("I am fun5");
    }
    public static void main(String []args){
        new test().fun1().fun2().fun3().fun4().fun5();
    }
}


    this :- to pass as an argument in the method.

    class test{
        void show (test t){
            System.out.println("Hello I am Show");
        }
        void display(){
            System.out.println("Hello I am Display");
            show(this);
        }
        public static void main(String []args){
            test t = new test();
            t.display();
        }
    }



    Example :-

    public class This {
    int bookId;
    String bookName;
    String bookAuthor;
    double bookPrice;
    
    void insertData(int bookId,String bookName,String bookAuthor,double bookPrice){
        this.bookId = bookId;
        this.bookName = bookName;
        this.bookAuthor = bookAuthor;
        this.bookPrice = bookPrice;
        // display(); // compiler automatically add this .
        this.display(); 
    }
    void display(){
        System.out.println("Book_Id "+bookId);
        System.out.println("Book_Name "+bookName);
        System.out.println("Book_Author "+bookAuthor);
        System.out.println("Book_Price "+bookPrice);
    }
    public static void main(String []args){
            This t1 = new This();
            t1.insertData(101, "Java" , "XYZ", 800);
    }
    
}

What is this Keyword stores ?

class test{
    void display(){
        System.out.println(this);
    }
    public static void main(String []args){
        test t1 = new test();
        System.out.println(t1);
        t1.display();
    }
}



OOPS 1 :-
Rule 1 :- whenever class level Variable (Instance Variable)and local Variable both are having same name then this concept is know as Data shodowing.

Constructor in java.

Constructor is a block of codes similar to the method. it is called whaen Instance of the class is created. At the time of calling constructor, mermory for the object is allocated in the mermory.

Every time an object is created using the new Keyword at least one constructor is called.

Rules :-

1. Constructor name must be same as its class.
2. A constructor must have no explicit return type.

Two types of constructor

1.  Non argument constructor
2. argument constructor /Parametrized Constructor .


Example of Non argument Constructor

class Test{
    test(){
        System.out.println("Default Constructor");
    }
}

Parametrized Constructor Example

class Test{
    test(int x , int y){
        System.out.println("DParametrized Constructor");
    }
}



Prove that compiler run automatically constructor on the object creation.

class test{
    public static void main(String []args){
        System.out.println("Hello world");
    }
}

use javap on command line.

Default constructor is used to provide the Default values to the object like 0 , null.


Java Parametrized Constructor

A constructor which has specific number of Parametrized is called a Parametrized Constructor.

class student {
    int stuId;
    String stuName;
    String stuCourse;
    student(int stuId,String stuName,String stuCourse){
        this.stuId=stuId;
        this.stuName=stuName;
        this.stuCourse=stuCourse;
    }
    void display(){
        System.out.println( stuId +" "+stuName+" "+stuCourse);
    }
    public static void main(String []args){
        student s1 = new student(101,"Abhishek","BCA");
        s1.display();
    }
}


Constructor OverLoading -:

class RegistrationForm{  
    String name;  
    String email;  
    String password;  
    long phone_number;  
    String gender;  
    String language;  
    int zip_code;  
    String about;   
    RegistrationForm(String name,String email,String password,long phone_number,String gender,String language,int zip_code){    
        this.name=name;    
        this.email=email;    
        this.password=password;    
        this.phone_number=phone_number;    
        this.gender=gender;    
        this.language=language;    
        this.zip_code=zip_code;    
        System.out.println("Name: "+name);    
        System.out.println("Email: "+email);    
        System.out.println("Password: "+password);    
        System.out.println("Phone Number: "+phone_number);    
        System.out.println("Gender: "+gender);    
        System.out.println("Language: "+language);    
        System.out.println("Zip Code: "+zip_code);    
        System.out.println();  \
        }    
        RegistrationForm(String name,String email,String password,long phone_number,String gender,String language,int zip_code,String about)
        {    
        this.name=name;    
        this.email=email;    
        this.password=password;    
        this.phone_number=phone_number;    
        this.gender=gender;    
        this.language=language;    
        this.zip_code=zip_code;    
        this.about=about;        
        System.out.println("Name: "+name);    
        System.out.println("Email: "+email);    
        System.out.println("Password: "+password);    
        System.out.println("Phone Number: "+phone_number);    
        System.out.println("Gender: "+gender);    
        System.out.println("Language: "+language);    
        System.out.println("Zip Code: "+zip_code);    
        System.out.println("About   : "+about);  
        }    
        RegistrationForm()  {    
            System.out.println("Name: "+name);    
            System.out.println("Email: "+email);   
            System.out.println("Password: "+password);    
            System.out.println("Phone Number: "+phone_number);    
            System.out.println("Gender: "+gender);    
            System.out.println("Language: "+language);    
            System.out.println("Zip Code: "+zip_code);    
            System.out.println("About   : "+about);      
            }    
            public static void main(String[] args)  {    
                RegistrationForm r1 = new RegistrationForm("Amit","Amit@gmail.com","Hello@123",9354474625l,"Male","English",110043);        RegistrationForm r2 = new RegistrationForm("Ajay","Ajay@gmail.com","Ajay@123",9354474625l,"Male","English",110043,"Hello Hi I am Java pro Programmer ");
                RegistrationForm r3 = new RegistrationForm();  
                }
    }

Difference between constructor and method.

Constructor                                                     Method
A constructor is used to initialize                             A method is used to exose the Behaviour of an object.
to state of object.                                             A method must have a return type.
The constructor must have no return type.
The constructor is invoke implicitly.                           The method is invoke explicitly.


We can make class name method is java .

Here is the Example:-


class Constructor {
    int bookId;
    String bookName;
    String bookAuthor;
    double bookPrice;
    
    Constructor(int bookId,String bookName,String bookAuthor,double bookPrice){
        this.bookId= bookId;
        this.bookAuthor=bookAuthor;
        this.bookName=bookName;
        this.bookPrice=bookPrice;
        Constructor();
    }
    void Constructor(){
        System.out.println("BookId "+ bookId);
        System.out.println("BookAuthor "+ bookAuthor);
        System.out.println("BookName "+ bookName);
        System.out.println("BookPrice "+ bookPrice);
    }
    public static void main(String []args){
        Constructor c1 = new Constructor(101,"Java","Abhishek",800);
    }
    
}

Java copy Constructor 

There is no copy constructor in java . However we can copy the values from one object to another object.


class Constructor {
   String name;
   int age;
   String course;
   Constructor(String name,int age ,String course){
    this.name= name;
    this.age=age;
    this.course=course;
   }
   Constructor(Constructor c1){
    name = c1.name;
    age = c1.age;
    course = c1.course;
   }
   void display(){
    System.out.println(name+" "+age+" "+course);
   }

    public static void main(String []args){
        Constructor c1 = new Constructor("Abhishek",22,"BCA");
        Constructor c2 = new Constructor(c1);
        c1.display();
        c2.display();
    }
    
}


Copy one object value into another by Reference.

class pratice{
    String name ;
    String brand;
    String price;
    public static void main(String []args){
        pratice p1 = new pratice();
        p1.name ="Abhishek";
        p1.brand="Iphone";
        p1.price="12000";
        System.out.println(p1.name+" "+p1.brand+" "+p1.price);
        pratice p2 = new pratice();
        p2=p1;
        System.out.println(p2.name+" "+p2.brand+" "+p2.price);
    }
}


Does constructor return any value ?

Yes ,it the current class Instance (You cannot use return type yet it returns a value ).

Can constructor perfrom other task instead of  initialization?

yes like a object creation , starting a thread , calling a method etc. 

Is there Constructor class in java?

yes, java.lang.reflect.Constructor.


Constructor Channing :-

this () : to invoke current class constructor (Constructor Chaining ).

Rule :- this() must be first line in constructor.

Rule :- create one constructor without using this () as function to break the chain.


class temp {
        temp(){
            System.out.println("Default Constructor");
        }   
        temp(int x){
            this();//this must be in first line.
            System.out.println(x);
        } 
        temp(int x,int y){
            this(100);//this must be in first line.
            System.out.println(x+y);
        } 
        temp(int x,int y,int z){
            this(100,200);//this must be in first line.
            System.out.println(x+y+z);
        } 
        public static void main(String []args){
            new temp(100,200,300);
        }
}

Instance Initializer Block(Init Block) :-

Init block does not have any name 
init block output will print before constructor.
using init block we can initialize Instance data member.

class initBlock{
    initBlock(){
        System.out.println("hello i am constructor ");
    }
    {
        System.out.println("hello Init block");
    }
    initBlock(int x){
        System.out.println(x);
    }
    public static void main(String []args){
            initBlock i1 = new  initBlock();
            initBlock i2 = new  initBlock();

    }
}


Java static keyword :-

It use to memory mainly. we can apply static keyword with variable,method ,blocks and nested classes.The static keyword belongs to class than an Instance of the class.

the static can be :

variable
Method 
Block 
Nested class

Advantage of static variable

It make your program memory efficent (i.e , it saves memory).

Example :-

class staticKeyword {
    static String compName ="Hcl";
    int empId;
    String empName;
    String empDesignation;

    staticKeyword(int empId,String empName,String empDesignatioString){
        this.empId=empId;
        this.empName=empName;
        this.empDesignation=empDesignatioString;
    }
    void display(){
        System.out.println("Company name "+compName);
        System.out.println("Employe name "+empName);
        System.out.println("Employe Id "+empId);
        System.out.println("Employe Designation "+empDesignation);
    }
    public static void main(String []args){
        staticKeyword s1 = new staticKeyword(1, "Abhishek", "Java dev");
        s1.display();
        staticKeyword s2 = new staticKeyword(2, "Abhi", "Python dev");
        s2.display();
    }
}


class pratice{
   int x ;
   pratice(){
    System.out.println(x);
    x++;
   }
    public static void main(String[] args) {
        pratice p1 =new pratice();
        pratice p2 =new pratice();
        pratice p3 =new pratice();
        pratice p4 =new pratice();
        pratice p5 =new pratice();

    } 
}

Answer is 0 . 

static method in java :-

A static method belongs to class rather than object.
A static method can be invoked without the need for creating on Instance of a class.
A static method can accesss static data member can change the value of it.

Example :-

class staticKeyword {
    static String compName ="Hcl";
    int empId;
    String empName;
    String empDesignation;

    staticKeyword(int empId,String empName,String empDesignatioString){
        this.empId=empId;
        this.empName=empName;
        this.empDesignation=empDesignatioString;
    }
    static void changeCompanyName(){
        compName="TCS";
    }
    void display(){
        System.out.println("Company name "+compName);
        System.out.println("Employe name "+empName);
        System.out.println("Employe Id "+empId);
        System.out.println("Employe Designation "+empDesignation);
    }
    public static void main(String []args){
        staticKeyword s1 = new staticKeyword(1, "Abhishek", "Java dev");
        s1.display();
        staticKeyword s2 = new staticKeyword(2, "Abhi", "Python dev");
        s2.display();
        changeCompanyName();
        staticKeyword s3 = new staticKeyword(3, "Simran", "javascript dev");
        s3.display();
    }
}

Q1 Why is the Java main method static?

Ans It is because the object is not required to call a static method. If it were a non-static method, JVM creates an object first then call main() method that will lead the problem of extra memory allocation.

3 Java static block:-
--------------------------------

Q2 Can we execute a program without main() method?

Ans No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a Java class without the main method.

Is used to initialize the static data member.
 
class test{
    static 
    {
        System.out.println("Hello i am static");
    }
    public static void main(String []args){
        System.out.println("Hello i am Main ");
    }
}

Inheritance in Java
-------------------------------

Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. 

The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.


Inheritance represents the IS-A relationship which is also known as a parent-child relationship.

Why use inheritance in java:-
--------------------------------------------
For Code Reusability.

For Method Overriding (so runtime polymorphism can be achieved).


Terms used in Inheritance:
-----------------------------------------

Class: A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.

Sub Class/Child Class: Subclass is a class which inherits the other class. It is also called a derived class, extended class, or child class.

Super Class/Parent Class: Superclass is the class from where a subclass inherits the features. It is also called a base class or a parent class.

Reusability: As the name specifies, reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class. You can use the same fields and methods already defined in the previous class.


The syntax of Java Inheritance:-
---------------------------------------------

//Syntax:-

class Parent
{
  
}
class Child extends Parent //IS A Relationship
{
  
}



The extends keyword indicates that you are making a new class that derives from an existing class. The meaning of "extends" is to increase the functionality.

In the terminology of Java, a class which is inherited is called a parent or superclass, and the new class is called child or subclass.


Rule:- 
  By Default All the Datamember and member function of Parent Class are available in Child Class.but they are not Private.


Rule: -   In case of Inhertinace Child Class Object is always created..

Example :-

class inheritance {
    int x;
    int y;
    void show(){
        System.out.println(x);
        System.out.println(y);
    }
}
class derived extends inheritance{
    void get(int x , int y){
        this.x=x;
        this.y=y;
        // show();
    }
    public static void main(String[] args) {
        derived d1 = new derived();
        d1.get(100,200);
        d1.show();
    }
}

Types in inheritance

On the bases of class there are 3 types of inheritance exist.

1 Single inheritance.
2 Multi level inheritance.
3 hierarchical inheritance.

1. Single inheritance :-

        When we have one class and only one child that is called single level inheritance.

Example :-

class inheritance {
    int x;
    int y;
    void show(){
        System.out.println(x);
        System.out.println(y);
    }
}
class derived extends inheritance{
    void get(int x , int y){
        this.x=x;
        this.y=y;
        // show();
    }
    public static void main(String[] args) {
        derived d1 = new derived();
        d1.get(100,200);
        d1.show();
    }
}

2. Multi level inheritance :-


        When we have one parent ,one child and one subchild. this is class Multi level inheritance.

Example :- 

class Employee
{
  int empId;
  String empName;
  String empDesignation;
}
class ProjectManager extends Employee
{
  double hra;
  double da;
}
class Programmer extends ProjectManager
{
  
  Programmer(int empId,String empName,String empDesignation,double hra,double da)
  {
    this.empId = empId;
    this.empName = empName;
    this.empDesignation = empDesignation;
    this.hra = hra;
    this.da = da;
  }
  
  void displayData()
  {
    System.out.println(empId+" "+empName+" "+empDesignation+" "+hra+" "+da);
  }
  
  public static void main(String[] args)
  {
    Programmer p1 = new Programmer(101,"Sachin","Java Developer",4500,2000);
    p1.displayData();
    Programmer p2 = new Programmer(102,"Amit","Python Developer",4000,2500);
    p2.displayData();
    Programmer p3 = new Programmer(103,"Vijay",".Net Developer",3500,300);
    p3.displayData();
    
  }
}


Hierarchical inheritance 

    When one class have Multiple derived classs this called hierarchical inheritance.

    Example :-

        class Car
{
  String brand;
  String name;
  String price;
  String seatingCapacity;
  String fuelTank;
  
  void show()
  {
    System.out.println(brand+" "+name+" "+price+" "+seatingCapacity+" "+fuelTank);
  }
  
}
class Thar extends Car
{
  Thar(String brand,String name,String price,String seatingCapacity,String fuelTank)
  {
    this.brand=brand;
    this.name=name;
    this.price=price;
    this.seatingCapacity=seatingCapacity;
    this.fuelTank=fuelTank;
  }
}
class Scorpio extends Car
{
  Scorpio(String brand,String name,String price,String seatingCapacity,String fuelTank)
  {
    this.brand=brand;
    this.name=name;
    this.price=price;
    this.seatingCapacity=seatingCapacity;
    this.fuelTank=fuelTank;
  }
}
class XUV7oo extends Car
{
  XUV7oo(String brand,String name,String price,String seatingCapacity,String fuelTank)
  {
    this.brand=brand;
    this.name=name;
    this.price=price;
    this.seatingCapacity=seatingCapacity;
    this.fuelTank=fuelTank;
  }
  
}
class TestInteritance
{
  public static void main(String[] args)
  {
    Thar t1 = new Thar("Mahindra","Thar","15.67lacs","4 Seater","56 Liters");
    Scorpio s1 = new Scorpio("Mahindra","Scorpio","23.67lacs","7 Seater","60 Liters");
    XUV7oo x1 = new XUV7oo("Mahindra","XUV7oo",".67lacs","7 Seater","60 Liters");
    t1.show();
    s1.show();
    x1.show();
  }
} 
Aggregation 

Aggregation in Java
--------------------------------

If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.

Why use Aggregation?

For Code Reusability.

Example

class a1 {
    double square(double n){
        return n*n;
    }    
}

class a2 {
        a1 a1;
        double areaOfcircle(double radius){
            a1 =new a1();
            double rsquare = a1.square(radius);
            return 3.14*rsquare;
        }
        public static void main(String []args){
            a2 a = new a2();
            System.out.println("Area of Circle is "+a.areaOfcircle(5));
        }    
}


Polymorphism

There is 2 type of polymorphism

1. Compile time polymorphism(Early Binding)
    whenever an object Bounds with thier functionality at compile time that concept is known as compile time Polymorphism.
    Ex - method OverLoading
2. Runtime polymorphism (Late Binding)
    whenever an object bounds with their functionality at runtimethan this concept is known as runtime polymorphism.
    Ex - method Overriding

Metthod OverLoading

Method OverLoading says you can create more then one method in one class having same name but diffrent in parameters.

Rule :- There only one way to achive method OverLoading change in parameter.

there are two ways to change in parameter:-

1. Change in number of Arrguments.

public class Methodoverloading {

    static void sum(int x, int y) {
        System.out.println("Sum of two Number " + (x + y));
    }
    static void sum(int x, int y,int z) {
        System.out.println("Sum of two Number " + (x + y+z));
    }
    static void sum(int x, int y,int z,int a) {
        System.out.println("Sum of two Number " + (x + y+z+a));
    }
    static void sum(int x, int y,int z,int a,int b) {
        System.out.println("Sum of two Number " + (x + y+z+a+b));
    }

    public static void main(String[] args) {
        sum(12, 13);
        sum(120, 134,45);
        sum(1290, 1323,56,780);
        sum(121, 1300,67,887,899);
        // sum(121, 1300,67,887,899,78);
    }
}

Variable Argument (Varargs):(Java 4/5 Version)

The varrags allows the method to accept zero or muliple arguments. Before varargs either we use overloaded method or take an array as the method parameter but it was not considered good because it leads to the maintenance problem. If we don't know how many argument we will have to pass in the method, varargs is the better approach.

Advantage of Varargs:
We don't have to provide overloaded methods so less code.

Syntax of varargs:
The varargs uses ellipsis i.e. three dots after the data type. Syntax is as follows:

return_type method_name(data_type... variableName){}  


Rules for varargs:

While using the varargs, you must follow some rules otherwise program code won't compile. The rules are as follows:

There can be only one variable argument in the method.
Variable argument (varargs) must be the last argument.


//VarArgs
class TestVarArgs
{
  void sum(int... num)
  {
    int sum=0;
    System.out.println("No Value pass as Arrgument");
    //For Each Loop
    for(int value:num)
    {
      System.out.print(value+" ");
      sum+=value;
    }
    System.out.println("Sum is : "+sum);
  }
  
  public static void main(String... args)
  {
    TestVarArgs t1 = new TestVarArgs();
    t1.sum();
    t1.sum(85,96,74,55,962,63,41,25,63,85);
  }
}


//VarArgs
class TestVarArgs
{
  void sum(String... num)
  {
    System.out.println("No Value pass as Arrgument");
    //For Each Loop
    for(String value:num)
    {
      System.out.print(value+" ");
      
    }
  }
  
  public static void main(String... args)
  {
    TestVarArgs t1 = new TestVarArgs();
    t1.sum();
    t1.sum("Ajay","Sachin","Manish","Vijay","Amit","kamal");
  }
}

//VarArgs
class TestVarArgs
{
  void sum(int n,String... num)
  {
    System.out.println(n);
    //For Each Loop
    for(String value:num)
    {
      System.out.print(value+" ");
      
    }
  }
  
  public static void main(String... args)
  {
    TestVarArgs t1 = new TestVarArgs();
    t1.sum(85,"Yash");
    t1.sum(100,"Ajay","Sachin","Manish","Vijay","Amit","kamal");
  }
}


//VarArgs
import java.util.Scanner;
class TestVarArgs
{
  String msg = "  ";
  void sum(String... num)
  {
    
    //For Each Loop
    for(String value:num)
    {
      msg+=value;
      
    }
    
  }
  void display()
  {
    System.out.println(msg);
  }
  
  public static void main(String... args)
  {
    TestVarArgs t1 = new TestVarArgs();
    Scanner s1 = new Scanner(System.in);
    for(int i=1;i<=5;i++)
    {
      String name = s1.nextLine();
      t1.sum(name);
    }
    t1.display();
  }
}

Command line arguments in java:-

To pass command-line arguments in Java, you can pass them as space-separated values when running the Java program. The arguments are then stored in an array called args in the main method. 


class TestCommandLine
{
  public static void main(String[] args)
  {
    System.out.println("Number of Command Line Argument = " + args.length);
    
    int sum = 0;
    for(int i=0 ; i<args.length;i++)
    {
      System.out.println(args[i]);
      sum+=Integer.parseInt(args[i]);
    }
    System.out.println("Sum is : "+sum);
  }
}


Method Overridding

example

class base{
    int x =100;
    void show(){
        System.out.println("Hello i am base class");
    }
}

class methodoverridding extends base {
    int x =200;// datamember overridding
    void show()// methodoverridding
    {
        System.out.println("hello i am child class");
    }
    public static void main(String []args){
        methodoverridding m1 = new methodoverridding();
        m1.show();
    }
}